DROP FUNCTION IF EXISTS reserve_slot(BIGINT, TEXT, INTEGER);CREATE OR REPLACE FUNCTION reserve_slot(_slot_id BIGINT, _user_id TEXT, _num_participants INTEGER)	RETURNS VOID AS $$
DECLARE	_old_num_participants   INTEGER;
	_exception_err TEXT;BEGIN
	BEGIN			SELECT reservations.r_num_participants		INTO _old_num_participants		FROM reservations		WHERE reservations.ts_id = _slot_id AND reservations.u_id = _user_id::uuid;		IF NOT FOUND THEN			INSERT INTO reservations(ts_id, u_id, r_num_participants, r_active)			VALUES (_slot_id, _user_id::uuid, _num_participants, B'1');  			UPDATE slots 			SET ts_vacant = ts_vacant - _num_participants 			WHERE ts_id = _slot_id;					ELSE			UPDATE reservations 			SET r_num_participants = _num_participants			WHERE reservations.ts_id = _slot_id AND reservations.u_id = _user_id::uuid;						UPDATE slots 			SET ts_vacant = ts_vacant - (_num_participants - _old_num_participants) 			WHERE ts_id = _slot_id;		END IF;
    EXCEPTION 		WHEN unique_violation THEN			GET STACKED DIAGNOSTICS _exception_err = MESSAGE_TEXT;			RAISE unique_violation USING MESSAGE = _exception_err;		WHEN foreign_key_violation THEN			GET STACKED DIAGNOSTICS _exception_err = MESSAGE_TEXT;			RAISE foreign_key_violation USING MESSAGE = _exception_err;		WHEN OTHERS THEN			GET STACKED DIAGNOSTICS _exception_err = MESSAGE_TEXT;			RAISE EXCEPTION USING MESSAGE = _exception_err;	END;	RETURN;
END;$$ LANGUAGE 'plpgsql';