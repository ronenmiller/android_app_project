DROP FUNCTION IF EXISTS update_ratings(TEXT, INTEGER, TEXT, REAL, REAL);CREATE OR REPLACE FUNCTION update_ratings(_my_id TEXT, _tour_id INTEGER, _guide_id TEXT, _tour_rating REAL, _guide_rating REAL)	RETURNS TABLE(t_rating REAL, u_rating REAL) AS$$DECLARE	_rating   REAL;	_exception_err TEXT;BEGIN	BEGIN			SELECT rate2tour.t_rating		INTO _rating		FROM rate2tour		WHERE rate2tour.u_id = _my_id::uuid AND rate2tour.t_id = _tour_id;		IF NOT FOUND THEN			INSERT INTO rate2tour(u_id, t_id, t_rating)			VALUES (_my_id::uuid, _tour_id, _tour_rating);			UPDATE tours			SET t_rating = (SELECT avg(rate2tour.t_rating) FROM rate2tour WHERE rate2tour.t_id = _tour_id GROUP BY rate2tour.t_id)			WHERE tours.t_id = _tour_id;					ELSE			UPDATE rate2tour			SET t_rating = _tour_rating			WHERE rate2tour.u_id = _my_id::uuid AND rate2tour.t_id = _tour_id;						UPDATE tours			SET t_rating = (SELECT avg(rate2tour.t_rating) FROM rate2tour WHERE rate2tour.t_id = _tour_id GROUP BY rate2tour.t_id)			WHERE tours.t_id = _tour_id;		END IF;		SELECT rate2guide.g_rating		INTO _rating		FROM rate2guide		WHERE rate2guide.u_id = _my_id::uuid AND rate2guide.g_id = _guide_id::uuid;		IF NOT FOUND THEN			INSERT INTO rate2guide(u_id, g_id, g_rating)			VALUES (_my_id::uuid, _guide_id::uuid, _guide_rating);			UPDATE users			SET u_rating = (SELECT avg(rate2guide.g_rating) FROM rate2guide WHERE rate2guide.g_id = _guide_id::uuid GROUP BY rate2guide.g_id)			WHERE users.u_id = _guide_id::uuid;		ELSE			UPDATE rate2guide			SET g_rating = _guide_rating			WHERE rate2guide.u_id = _my_id::uuid AND rate2guide.g_id = _guide_id::uuid;			UPDATE users			SET u_rating = (SELECT avg(rate2guide.g_rating) FROM rate2guide WHERE rate2guide.g_id = _guide_id::uuid GROUP BY rate2guide.g_id)			WHERE users.u_id = _guide_id::uuid;		END IF;        RETURN QUERY        SELECT tours.t_rating, users.u_rating        FROM tours, users        WHERE tours.t_id = _tour_id        AND users.u_id = _guide_id::uuid;        RETURN;    EXCEPTION 		WHEN unique_violation THEN			GET STACKED DIAGNOSTICS _exception_err = MESSAGE_TEXT;			RAISE unique_violation USING MESSAGE = _exception_err;		WHEN foreign_key_violation THEN			GET STACKED DIAGNOSTICS _exception_err = MESSAGE_TEXT;			RAISE foreign_key_violation USING MESSAGE = _exception_err;		WHEN OTHERS THEN			GET STACKED DIAGNOSTICS _exception_err = MESSAGE_TEXT;			RAISE EXCEPTION USING MESSAGE = _exception_err;	END;	RETURN;END;$$ LANGUAGE 'plpgsql';